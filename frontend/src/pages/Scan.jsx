import { useNavigate } from 'react-router-dom'
import { useRef, useState } from 'react'
import CameraCapture from '../components/CameraCapture'
import { useApp } from '../context/AppContext'
import { analyzeImage } from '../lib/api'

export default function Scan() {
  const navigate = useNavigate()
  const { state, dispatch } = useApp()
  const [localImage, setLocalImage] = useState(state.imageDataUrl)
  const [error, setError] = useState('')
  const [loading, setLoading] = useState(false)
  const [showCamera, setShowCamera] = useState(false)
  const camRef = useRef(null)

  function onFileChange(e) {
    setError('')
    const file = e.target.files?.[0]
    if (!file) return
    if (!file.type.startsWith('image/')) {
      setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.')
      return
    }
    if (file.size > 8 * 1024 * 1024) {
      setError('–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª. –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ 8 –ú–ë.')
      return
    }
    const reader = new FileReader()
    reader.onload = () => {
      setLocalImage(reader.result)
      dispatch({ type: 'SET_IMAGE', payload: reader.result })
    }
    reader.readAsDataURL(file)
  }

  function onCapture(dataUrl) {
    setLocalImage(dataUrl)
    dispatch({ type: 'SET_IMAGE', payload: dataUrl })
  }

  async function onAnalyze() {
    if (!localImage) {
      setError('–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Å–¥–µ–ª–∞–π—Ç–µ —Å–Ω–∏–º–æ–∫.')
      return
    }
    setLoading(true)
    setError('')
    try {
      // TODO(API): replace analyzeImage with real /analyses/ POST when backend is ready
      const result = await analyzeImage({ imageDataUrl: localImage })
      dispatch({ type: 'SET_ANALYSIS', payload: result })
      dispatch({ type: 'SAVE_TO_HISTORY', payload: result })
      navigate('/results')
    } catch (e) {
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.')
    } finally {
      setLoading(false)
    }
  }

  return (
    <div className="mx-auto max-w-6xl px-4 sm:px-6 lg:px-8 py-8 sm:py-12">
      {/* Top hero like the reference */}
      <div className="rounded-3xl border border-slate-200 bg-white p-6 sm:p-10 shadow-sm">
        <div className="mx-auto max-w-3xl text-center">
          <h1 className="text-3xl sm:text-4xl font-semibold text-slate-900">–°–¥–µ–ª–∞–π—Ç–µ —Å–µ–ª—Ñ–∏</h1>
          <p className="mt-2 text-slate-600">–ú—ã –ø–æ–¥—Å–∫–∞–∂–µ–º, –∫–∞–∫ –ª—É—á—à–µ —Å–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ, –∞ –∑–∞—Ç–µ–º –ø–æ–∫–∞–∂–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.</p>
          <h2 className="mt-8 text-2xl sm:text-3xl font-semibold text-slate-900">–ò–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–≤–æ—ë —Ñ–æ—Ç–æ</h2>
          <p className="mt-2 text-slate-600">–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ—Å–≤–µ—â–µ–Ω–∏–µ —Ö–æ—Ä–æ—à–µ–µ, –ª–∏—Ü–æ –≤ –∫–∞–¥—Ä–µ, –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –æ–±–∑–æ—Ä.</p>

          {/* Guidance icons */}
          <div className="mt-6 flex items-center justify-center gap-6 text-slate-400">
            <div className="grid place-items-center h-14 w-14 rounded-full ring-1 ring-slate-200">
              <span className="text-xl">üí°</span>
            </div>
            <div className="grid place-items-center h-14 w-14 rounded-full ring-1 ring-slate-200">
              <span className="text-xl">üìê</span>
            </div>
            <div className="grid place-items-center h-14 w-14 rounded-full ring-1 ring-slate-200">
              <span className="text-xl">ü™û</span>
            </div>
          </div>

          <p className="mt-6 text-xs text-slate-500">–ú—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —Å–¥–µ–ª–∞–Ω–Ω—ã–µ –≤ –¥–µ–º–æ‚Äë—Ä–µ–∂–∏–º–µ.</p>

          {/* Big actions */}
          <div className="mt-8 grid gap-4 sm:grid-cols-2">
            <label className="cursor-pointer rounded-lg border-2 border-slate-300 px-6 py-4 text-slate-900 hover:bg-slate-50">
              <input type="file" accept="image/*" className="hidden" onChange={onFileChange} />
              <div className="text-base sm:text-lg font-semibold">–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ</div>
            </label>
            <button
              onClick={async () => {
                setShowCamera(true)
                // Try to auto start if ref available
                setTimeout(() => camRef.current?.start?.(), 0)
              }}
              className="rounded-lg bg-slate-900 px-6 py-4 text-white text-base sm:text-lg font-semibold hover:bg-black"
            >
              –°–¥–µ–ª–∞—Ç—å —Å–µ–ª—Ñ–∏
            </button>
          </div>
        </div>
      </div>

      {/* Preview / camera and actions */}
      <div className="mt-8 grid gap-8 lg:grid-cols-2">
        <div className="space-y-4">
          {showCamera ? (
            <CameraCapture ref={camRef} onCapture={onCapture} autoStart />
          ) : (
            <div className="rounded-xl border border-slate-200 bg-white p-4 shadow-sm">
              {localImage ? (
                <img src={localImage} alt="preview" className="w-full rounded-lg object-cover" />
              ) : (
                <div className="aspect-[3/4] w-full rounded-lg bg-slate-50 grid place-items-center text-slate-400">
                  –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –±—É–¥–µ—Ç –∑–¥–µ—Å—å
                </div>
              )}
            </div>
          )}
          {error && <p className="text-sm text-rose-600">{error}</p>}
        </div>

        <div className="space-y-6">
          <h3 className="text-xl font-semibold">–î–µ–π—Å—Ç–≤–∏—è</h3>
          <div className="flex flex-wrap gap-3">
            <button
              onClick={onAnalyze}
              disabled={loading || !localImage}
              className="inline-flex items-center justify-center rounded-md bg-cyan-600 px-6 py-3 text-white font-medium shadow hover:bg-cyan-700 disabled:opacity-60"
            >
              {loading ? '–ê–Ω–∞–ª–∏–∑...' : '–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å'}
            </button>
            <button
              onClick={() => {
                setLocalImage(null)
                dispatch({ type: 'SET_IMAGE', payload: null })
              }}
              className="inline-flex items-center justify-center rounded-md bg-slate-100 px-6 py-3 text-slate-700 hover:bg-slate-200"
            >
              –°–±—Ä–æ—Å–∏—Ç—å
            </button>
            {showCamera && (
              <button
                onClick={() => {
                  camRef.current?.stop?.()
                  setShowCamera(false)
                }}
                className="inline-flex items-center justify-center rounded-md bg-slate-100 px-6 py-3 text-slate-700 hover:bg-slate-200"
              >
                –ó–∞–∫—Ä—ã—Ç—å –∫–∞–º–µ—Ä—É
              </button>
            )}
          </div>
          <p className="text-xs text-slate-500">
            –î–µ–º–æ-—Ä–µ–∂–∏–º: —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è —Å–ª—É—á–∞–π–Ω–æ. –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –≤
            <code className="ml-1 rounded bg-slate-100 px-1">src/lib/api.js</code>.
          </p>
        </div>
      </div>
    </div>
  )
}
